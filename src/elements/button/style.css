@value vars: '../../css/vars.css';
@value transitionTimeAndEase from vars;
@value mainTextColor from vars;
@value outlineExpr from vars;

@value buttonBorderIncreaseFactorDelta: 0.091;

.Button {
  font-size: 1.4rem;
  text-transform: uppercase;
  font-weight: bold;
  cursor: pointer;

  color: mainTextColor;
  border: 1px solid darkgray;
  background-color: hsl(0, 0%, 98%);
  border-radius: 2px;

  padding: 4px 8px;

  &:focus {
    box-shadow: outlineExpr;
    outline: none;
  }

  transition: transform transitionTimeAndEase;
  & span {
    display: inline-block;
    transition: transform transitionTimeAndEase;
  }

  &:not(:disabled):not(.m-transparent) {
    &:hover {
      border: 1px solid mainTextColor;
      transform: scale(calc(1 + buttonBorderIncreaseFactorDelta)) rotateZ(-2deg);

      & span {
        transform: scale(calc(1 - (buttonBorderIncreaseFactorDelta / (1 + buttonBorderIncreaseFactorDelta)))) rotateZ(2deg);
      }
    }
  }
}

.v-positive {
  color: hsla(139, 81%, 26%, 1);
  border-color: hsla(139, 81%, 26%, 1);
}
.v-negative {
  color: hsla(316, 64%, 51%, 1);
  border-color: hsla(316, 64%, 51%, 1);
}

.m-full {
  background-color: mainTextColor;
  color: white;
  &.v-positive {
    background-color: hsla(139, 81%, 26%, 1);
  }
  &.v-negative {
    background-color: hsla(316, 64%, 51%, 1);
  }
}
.m-ghost {
  border-color: transparent;
  background: transparent;
}

.m-transparent {
  composes: m-ghost;

  &:hover {
    transform: none;
    border-color: transparent;
    & span {
      transform: scale(1.1) rotateZ(-1deg);;
    }
  }
}

.Button:disabled {
  cursor: not-allowed;
  opacity: 0.6;
  &.m-transparent:hover {
    transform: none;
    border-color: transparent;
    & span {
      transform: none
    }
  }
}
